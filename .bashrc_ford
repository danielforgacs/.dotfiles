# ADD THE NEX LINES TO .bashrc
# export DEVDIR=/home/ford/storage/dev
# source /home/ford/.bashrc_ford


printf '\033[32m================================\n'
echo '--> .bashrc_ford:'


# ------------------------------------
# Terminal config.

export HISTTIMEFORMAT="%F %T "
export HISTSIZE=25000
# export HISTCONTROL=ignoreboth:erasedups
# export HISTIGNORE=hh:exit
export PS1='\[\033[0;32m\]\[\033[0m\033[0;32m\]\u\[\033[0;36m\] @ \[\033[0;36m\]\h \w\[\033[0;32m\]$(__git_ps1)\n\[\033[0;32m\]└─\[\033[0m\033[0;32m\] \$\[\033[0m\033[0;32m\] ▶\[\033[0m\] '


# ------------------------------------
# App config.

export GIT_EDITOR=vim
export PYTHONDONTWRITEBYTECODE=True
# export PYTHONUNBUFFERED=1
# export PYTHONINSPECT=True
# export PYTHONVERBOSE=True
# export PYTHONTHREADDEBUG=True
export PIPENV_VENV_IN_PROJECT=1


# ------------------------------------
# Aliases

alias hh='history'
alias ll='ls -lAhuv --group-directories-first'
alias lll='ls -lhuv --group-directories-first'
alias cddev='cd $DEVDIR; ll'
# alias nukedocker="docker system prune --volumes --force --all"
alias nukedocker="docker ps -q | xargs docker kill; docker system prune --volumes --force --all"



# ------------------------------------
# Git Aliases

alias gs='git status'
alias gss='git status -u'
alias gr='git reflog'
alias grr='git reflog --all'
alias gu='git gui &'
alias gk='gitk &'
alias gkk='gitk --all &'
alias gb='git branch -vv'
alias gbb='git branch --all -vv'
alias gf='git fetch --all'
alias gff='git fetch --all --prune'
alias gd='git diff'
alias gdd='git diff -U1 -w --color-words'
alias gl='git log'
alias gll='git log --all'
alias gg="git log --oneline --graph --decorate"
alias ggg="git log --oneline --all --graph --decorate"
alias gls='git shortlog --all'



initrepo() {
	if [ ! -d .git ]; then
		# Initializing git repo if there's no .git dir.
		git init
	fi;

	initbranch=repo.init

	git commit --allow-empty -m "Initial commit."
	git checkout -b $initbranch

	# GITIGNORE
	echo "# files:
*.py[co]

# directories:
.venv/" > .gitignore

	git add .gitignore
	git commit -m "Started .gitignore; added python caches."

	# GITATTRIBUTES
	echo "*.py text eol=lf diff=python" > .gitattributes

	git add .gitattributes
	git commit -m "Started .gitattributes; configured python files."

	# PYTEST
	echo "[pytest]
addopts=--ff" > pytest.ini

	git add pytest.ini
	git commit -m "Started pytest config .ini"

	# PYLINT
	echo "[MESSAGES CONTROL]

disable=missing-module-docstring,
      missing-class-docstring,
      missing-function-docstring,
      too-few-public-methods,
      no-member," > .pylintrc

	git add .pylintrc
	git commit -m "Started pylintrc."

	# EDITORCONFIG
	echo "root = true

[*.py]
charset = utf-8
end_of_line = lf
indent_size = 4
indent_style = space
insert_final_newline = true
trim_trailing_whitespace = true" > .editorconfig

	git add .editorconfig
	git commit -m "started editorconfig file; configured python files."

	# README
	touch README.md

	git add README.md
	git commit -m 'Started readme.'

	# PIPFILE
	echo "[[source]]
url = \"https://pypi.python.org/simple\"
verify_ssl = true
name = \"pypi\"

[packages]

[dev-packages]
pytest = \"*\"
pylint = \"*\"

[requires]
python_version = \"3.8\"
" > Pipfile

	git add Pipfile
	git commit -m 'Started pipenv pipfile.'

	# .ENV
	echo "DEBUG=1" > .env

	git add .env
	git commit -m "Started .env file."

	# DOCKER-COMPOSE
	echo 'version: "3.7"

services:' > docker-compose.yml

	git add docker-compose.yml
	git commit -m "Started docker compose yaml."

	# MAKEFILE
	touch Makefile

	git add Makefile
	git commit -m 'Started makefile.'

	# GITHUB ACTIONS:
	mkdir -p .github/workflows
	echo "name: Python Pytest testing template

on: push

jobs:

  test:
    
    runs-on: ubuntu-20.04
    timeout-minutes: 15

    steps:
      - name: actions/checkout@v2
        uses: actions/checkout@v2

      - name: actions/setup-python@v2
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Install pipenv
        run: python -m pip install --upgrade pipenv wheel

      - name: Install dependencies
        run: python -m pipenv install --dev

      - name: Run tests
        run: pipenv run pytest -svvv
" > .github/workflows/workflow.yml

	git add .github/workflows/workflow.yml
	git commit -m 'Started github workflow action yaml config file.'

	git checkout master
	git merge --no-ff --no-edit $initbranch
	git branch -d $initbranch

	git log --oneline --all --graph --decorate
}



echo '.. host:' $HOSTNAME
echo '.. dev dir:' $DEVDIR
echo '.. python: ' `which python`
echo '.. python 3: ' `which python3`
echo '.. git: ' `which git`
echo '--> .bashrc_ford sourced...'
printf '\033[32m================================\n'
